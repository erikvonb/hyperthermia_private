# -*- coding: utf-8 -*-
#--------------

import h5py

from dolfin import *
import numpy as np

"""
    This function calculated the temperature in each time step using FEniCS. The scaling of P is read from files generated by pennes.py
    """

# Load in .mat parameter
# The optional input argument 'degree' is FEniCS internal interpolation type.
# The loaded data will additionally be fit with trilinear interpolation.
def load_data(filename, degree=0):
    
    # Load the .mat file
    f = h5py.File(filename, "r")
    data = np.array(list(f.items())[0][1], dtype=float)
    f.close()

    # Load the intepolation c++ code
    f = open('TheGreatInterpolator.cpp', "r")
    code = f.read()
    f.close()

    # Amend axis ordering to match layout in memory
    size = tuple(reversed(np.shape(data)))

    # Add c++ code to FEniCS
    P = Expression(code, degree=degree)

    # Add parameters about the data
    P.stridex  = size[0]
    P.stridexy = size[0]*size[1]
    P.sizex = size[0]
    P.sizey = size[1]
    P.sizez = size[2]
    P.sidelen = 1.0/1000

    # As the last step, add the data
    P.set_data(data)
    return P

# Load mesh
print("Reading and unpacking mesh...")
mesh = Mesh('../Input_to_FEniCS/mesh.xml')

# Define material properties
# -------------------------
# T_b:      blood temperature [K relative body temp]
# P:        power loss density [W/m^3]
# k_tis:    thermal conductivity [W/(m K)]
# w_c_b:    volumetric perfusion times blood heat capacity [W/(m^3 K)]
# alpha:    boundary heat transfer constant [W/(m^2 K)]
# T_out_ht  alpha times ambient temperature [W/(m^2)]

print('Importing material properties...')

T_b = Constant(0.0) # Blood temperature relative body temp
# Load P matrix
P        = load_data("../Input_to_FEniCS/P.mat")

T_b = Constant(0.0) # Blood temperature relative body temp

k_tis    = load_data("../Input_to_FEniCS/thermal_cond.mat")

# Load the w_c_b
w_c_b    = load_data("../Input_to_FEniCS/perfusion_heatcapacity.mat") # This is the "standard" perfusion matrix with linear values
alpha    = load_data("../Input_to_FEniCS/bnd_heat_transfer.mat", 0)
T_out_ht = load_data("../Input_to_FEniCS/bnd_temp_times_ht.mat", 0)
c = load_data("../Input_to_FEniCS/heat_capacity.mat",0)
rho = load_data("../Input_to_FEniCS/density.mat",0)

	
#-----------------------
Tmax= 5 # 0 = 37C, 8 if head and neck, 5 if brain
Tmin= 4.5 # 0 = 37C
Time=10
dt=0.1
numSteps=Time/dt
#-----------------------

# Load the scale of amplitudes and P found when running the original version of Pennes (step 1, i.e pennes.py)
with open("../FEniCS_results/scale_factor.txt") as file:
    scaleTotal = file.read()
    print("Scale is :")
    print(scaleTotal)

print("Done loading.")
scale=Constant(scaleTotal)
P=P*scale

# Define function space and test/trial functions needed for the variational formulation
V = FunctionSpace(mesh, "CG", 1)
u = TrialFunction(V)
v = TestFunction(V)

#Initial condition
u_IC= Expression("0", t=0, degree=0) # degree=1?
u_n=interpolate(u_IC,V)

# Define variational formulation
F=dt*alpha*u*v*ds + c*rho*v*u*dx + dt*k_tis*dot(grad(u), grad(v))*dx - (c*rho*u_n + dt*(P-w_c_b*u))*v*dx - dt*T_out_ht*v*ds
# set the equation on the right form for the solver
a=lhs(F)
L=rhs(F)
u=Function(V)

# Now take steps in time and estimate the temperature for each time step
t=0
for n in range(int(numSteps)):
    # Update time
    t += dt

    # Solve the system
    solve(a == L, u, solver_parameters={'linear_solver':'gmres'})
    T =u.vector().array()
    
    # Print the highest temperature
    print("Tmax for time step number " + str(int(t/dt)) + ":")
    print(np.max(T))

    u_n.assign(u)


    # If okay temperature then save data for each time step in format readable by MATLAB
    if (np.max(T)<Tmax and np.max(T)>Tmin):
        Coords = mesh.coordinates()
        Cells  = mesh.cells()

        # Index for this time step should be included in the name for the temperature file
        index=t/dt
        f = h5py.File('../FEniCS_results/temperature_'+ str(index) + '.h5','w')
        f.create_dataset(name='Temp', data=T)
        f.create_dataset(name='P',    data=Coords)
        f.create_dataset(name='T',    data=Cells)
        # Need a dof(degree of freedom)-map to permutate Temp
        f.create_dataset(name='Map',  data=dof_to_vertex_map(V))
        f.close()
        print("saved T for step: ")
        print(index)


print('Finished')

